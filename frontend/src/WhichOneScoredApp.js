import { useState } from "react";
import "./App.css";

const percentages = [99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1];
const constantScoreIncrease = 2;
const scoreFactor = 10;

function randomBool() {
  return Math.random() < 0.5;
}

function getLeftToken(comparison, correctToTheLeft) {
  if (correctToTheLeft) {
    return comparison.correct_token_str;
  } else {
    return comparison.generated_token_str;
  }
}
function getRightToken(comparison, correctToTheLeft) {
  if (correctToTheLeft) {
    return comparison.generated_token_str;
  } else {
    return comparison.correct_token_str;
  }
}

function addInvisibleTokenToText(text) {
  return (
    <>
      {text.split("").map(function (c) {
        if (c === " ")
          return (
            <>
              <span className="invisible-space"> </span>
              <span className="invisible-letter">â€¢</span>
            </>
          );
        else if (c === "\n")
          return <span className="invisible-letter">\n</span>;
        else return c;
      })}
    </>
  );
}

function computeAbsoluteGuess(guess, correctToTheLeft) {
  return correctToTheLeft ? guess : 100 - guess;
}

function computeDelta(comparison, guess) {
  console.log(guess);
  console.log(comparison);
  return (
    scoreFactor *
      comparison.generated_logprobs[comparison.generator_index] *
      Math.log(guess / 100) +
    constantScoreIncrease
  );
}

function WhichOneScoredApp(props) {
  const { initialComparison } = props;

  const [name, setName] = useState(localStorage.getItem("name") || "anon");

  const [comparison, setComparison] = useState(initialComparison);
  const [correctToTheLeft, setCorrectToTheLeft] = useState(randomBool());

  const [guess, setGuess] = useState(-1);
  const [hasGuessed, setHasGuessed] = useState(false);
  const [error, setError] = useState("");
  const [score, setScore] = useState(0);
  const [lastDelta, setLastDelta] = useState(10.01);

  function getNewComparison() {
    fetch("/get_comparison")
      .then((response) => response.json())
      .then((comparison) => {
        setComparison(comparison);
      });
  }

  function reset() {
    setGuess(-1);
    setHasGuessed(false);
    getNewComparison();
    setCorrectToTheLeft(randomBool());
    setError("");
  }
  function handleSubmit(e) {
    if (guess === -1) {
      setError("Please give your confidence level.");
      return;
    }
    const delta = computeDelta(comparison, computeAbsoluteGuess(guess));
    setLastDelta(delta);
    setScore((score) => score + delta);
    setHasGuessed(true);
    fetch("/submit_whichone_guess", {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: name,
        guess: computeAbsoluteGuess(guess, correctToTheLeft),
        comparison_id: comparison.id,
      }),
    });
  }

  return (
    <div className="whichone-App">
      <h1>A new language modelling game!</h1>
      <p>
        Read instructions and notes{" "}
        <a href="https://docs.google.com/document/d/1MrL5_C3TNkml1MDRVvMg_c8WgXggOWmGEIwGHc1bJ1A/edit?usp=sharing">
          here
        </a>
        . Be careful, to get a score as high as possible, you should play as if
        you were choosing between the true next token and another one chosen
        uniformly at random between all other tokens, so don't hesitate to put
        high probability on one token if you think the other is highly unlikely.
        For more details on the scoring section and about the optimal strategy
        (which we need you to follow), please check out the notes.
      </p>
      <div>
        Your name:{" "}
        <input
          value={name}
          onChange={(e) => {
            setName(e.target.value);
            localStorage.setItem("name", e.target.value);
          }}
        />{" "}
        Your current score: <b>{score.toFixed(0)}</b>
        {hasGuessed && (
          <span className="delta">
            {" "}
            ({lastDelta > 0 && "+"}
            {lastDelta.toFixed(0)})
          </span>
        )}
      </div>
      <p>
        Read the following prompt. Token A or token B is a token that appeared
        next index the original text. The other one was generated by a language
        model. How confident are you that <b>token A</b> is the one that
        appeared in the original text?
      </p>
      <p>(comparison number: {comparison.id})</p>
      <p className="prompt">{addInvisibleTokenToText(comparison.input_str)}</p>
      <div className="token-list">
        <div className={correctToTheLeft && hasGuessed ? "token-correct" : ""}>
          <p>Token A</p>
          <p>
            <b>
              {addInvisibleTokenToText(
                getLeftToken(comparison, correctToTheLeft)
              )}
            </b>
          </p>
        </div>
        <div className={!correctToTheLeft && hasGuessed ? "token-correct" : ""}>
          <p>Token B</p>
          <p>
            <b>
              {addInvisibleTokenToText(
                getRightToken(comparison, correctToTheLeft)
              )}
            </b>
          </p>
        </div>
      </div>
      <div className="radios">
        <p>A is more likely to be correct</p>
        {percentages.map(function (percent, i) {
          return (
            <label key={`percentage_${i}`}>
              {percent}%<br />
              <input
                type="radio"
                id={`percentage_${i}`}
                value={percent}
                checked={guess === percent}
                onChange={function () {
                  if (!hasGuessed) {
                    setGuess(percent);
                    setError("");
                  }
                }}
              />
            </label>
          );
        })}
        <p>B is more likely to be correct</p>
      </div>

      <div className="submit-button">
        <button onClick={handleSubmit} disabled={hasGuessed}>
          {hasGuessed ? "Submitted" : "Submit guess"}
        </button>
        <span style={{ width: "2em" }} />
        <button onClick={reset} disabled={!hasGuessed}>
          Next completion
        </button>
      </div>

      <p className="error">{error}</p>
      <br />
    </div>
  );
}

export default WhichOneScoredApp;
